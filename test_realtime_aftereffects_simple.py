#!/usr/bin/env python3
"""
Simple real-time After Effects testing
Uses a different approach to avoid permission issues
"""

import sys
import os
import subprocess
import platform

def find_after_effects_path():
    """Find After Effects installation path"""
    system = platform.system()
    
    if system == "Darwin":  # macOS
        possible_paths = [
            "/Applications/Adobe After Effects 2025/Adobe After Effects 2025.app",
            "/Applications/Adobe After Effects 2024/Adobe After Effects 2024.app",
            "/Applications/Adobe After Effects 2023/Adobe After Effects 2023.app"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return path
    return None

def create_temp_script(commands):
    """Create a temporary After Effects script file"""
    script_content = f"""
// After Effects Script generated by Cench AI
{commands}

// Log completion
$.writeln("Script execution completed successfully!");
"""
    
    # Create temp file in user's home directory to avoid permission issues
    temp_path = os.path.expanduser("~/cench_ae_test.jsx")
    with open(temp_path, 'w') as f:
        f.write(script_content)
    
    return temp_path

def execute_after_effects_script(script_path):
    """Execute After Effects script using command line"""
    try:
        ae_path = find_after_effects_path()
        if not ae_path:
            return {"success": False, "message": "After Effects not found"}
        
        # Use osascript to launch After Effects with the script
        if platform.system() == "Darwin":
            # macOS approach using AppleScript
            apple_script = f'''
tell application "Adobe After Effects 2025"
    activate
    delay 1
    do script file "{script_path}"
end tell
'''
            
            result = subprocess.run(['osascript', '-e', apple_script], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                return {"success": True, "message": "Script executed via AppleScript"}
            else:
                return {"success": False, "message": f"AppleScript failed: {result.stderr}"}
        
    except subprocess.TimeoutExpired:
        return {"success": False, "message": "Script execution timed out"}
    except Exception as e:
        return {"success": False, "message": f"Execution error: {str(e)}"}

def main():
    print("üé¨ SIMPLE REAL-TIME AFTER EFFECTS TESTING")
    print("="*50)
    
    # Check if After Effects is found
    ae_path = find_after_effects_path()
    if not ae_path:
        print("‚ùå After Effects not found!")
        sys.exit(1)
    
    print(f"‚úÖ After Effects found at: {ae_path}")
    
    print("\n" + "="*50)
    print("üìã PREREQUISITES CHECK")
    print("="*50)
    print("Before running these tests, make sure:")
    print("1. ‚úÖ After Effects is running")
    print("2. ‚úÖ You have a project open")
    print("3. ‚úÖ You have a composition open")
    print("4. ‚úÖ The composition is visible on screen")
    
    input("\nPress Enter when you're ready to test real-time commands...")
    
    print("\n" + "="*50)
    print("üöÄ TEST 1: Create a Text Layer")
    print("="*50)
    
    text_command = '''
// Create a text layer
var comp = app.project.activeItem;
if (comp && comp instanceof CompItem) {
    var textLayer = comp.layers.addText("Hello from Cench AI!");
    textLayer.position.setValue([comp.width/2, comp.height/2]);
    $.writeln("Text layer created successfully!");
} else {
    $.writeln("Please open a composition first!");
}
'''
    
    print("Creating temporary script file...")
    temp_script = create_temp_script(text_command)
    print(f"Script saved to: {temp_script}")
    
    print("\nExecuting script in After Effects...")
    print("Note: This will use AppleScript to control After Effects")
    
    result = execute_after_effects_script(temp_script)
    
    if result['success']:
        print("‚úÖ Script execution initiated!")
        print("   Check After Effects for the new text layer")
        print("   You should see 'Hello from Cench AI!' appear")
    else:
        print("‚ùå Script execution failed:")
        print(f"   Error: {result['message']}")
    
    # Clean up
    if os.path.exists(temp_script):
        os.remove(temp_script)
        print(f"‚úÖ Temporary script cleaned up")
    
    print("\n" + "="*50)
    print("üéØ WHAT TO EXPECT")
    print("="*50)
    print("If successful, you should see in After Effects:")
    print("1. ‚úÖ A new text layer appears")
    print("2. ‚úÖ Text says 'Hello from Cench AI!'")
    print("3. ‚úÖ Text is centered in the composition")
    
    print("\n" + "="*50)
    print("üîÑ NEXT STEPS")
    print("="*50)
    print("1. Check After Effects for the new text layer")
    print("2. Try manually running the script from Scripts menu")
    print("3. Once working, integrate with Cench AI app")
    print("4. Use natural language to control After Effects!")
    
    print("\n" + "="*50)
    print("üí° TROUBLESHOOTING")
    print("="*50)
    print("If the text doesn't appear:")
    print("‚Ä¢ Make sure a composition is open and active")
    print("‚Ä¢ Check After Effects console for errors")
    print("‚Ä¢ Try running the script manually from Scripts menu")
    print("‚Ä¢ Make sure After Effects is not in a modal dialog")

if __name__ == "__main__":
    main() 